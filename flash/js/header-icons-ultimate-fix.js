// 🚀 الحل النهائي المميز لوظائف أيقونات الهيدر - USDT-FLASH
// نظام متطور لإدارة التنقل والتفاعل مع الأيقونات

(function() {
    'use strict';
    
    console.log('🚀 تحميل نظام الأيقونات المتطور...');
    
    // إعدادات النظام
    const SYSTEM_CONFIG = {
        debug: true,
        retryAttempts: 5,
        retryDelay: 500,
        animationDuration: 300,
        hoverEffects: true,
        soundEffects: false
    };
    
    // مسارات الصفحات
    const PAGE_ROUTES = {
        profile: 'pages/profile.html',
        register: 'pages/register.html',
        live: 'pages/live-transactions.html',
        support: 'pages/support.html',
        notifications: 'pages/notifications.html',
        news: 'pages/news.html'
    };
    
    // بيانات الأيقونات
    const ICONS_DATA = [
        {
            selector: '.profile-icon',
            name: 'Profile',
            action: 'handleProfileAccess',
            badge: 'NEW',
            badgeClass: 'badge-profile',
            tooltip: 'الملف الشخصي'
        },
        {
            selector: '.live-icon',
            name: 'Live Transactions',
            action: 'handleLiveTransactions',
            badge: 'LIVE',
            badgeClass: 'badge-live',
            tooltip: 'المعاملات المباشرة'
        },
        {
            selector: '.support-icon',
            name: 'Support',
            action: 'handleSupport',
            badge: '24/7',
            badgeClass: 'badge-support',
            tooltip: 'الدعم الفني'
        },
        {
            selector: '.notifications-icon',
            name: 'Notifications',
            action: 'handleNotifications',
            badge: '3',
            badgeClass: 'badge-notifications',
            tooltip: 'الإشعارات'
        }
    ];
    
    // فئة إدارة الأيقونات
    class HeaderIconsManager {
        constructor() {
            this.initialized = false;\n            this.retryCount = 0;\n            this.icons = [];\n            this.eventListeners = [];\n            \n            this.init();\n        }\n        \n        // تهيئة النظام\n        async init() {\n            try {\n                console.log('🔧 بدء تهيئة نظام الأيقونات...');\n                \n                await this.waitForDOM();\n                await this.createIconsStructure();\n                await this.setupEventListeners();\n                await this.addNotificationBadges();\n                await this.enableHoverEffects();\n                await this.setupAccessibility();\n                \n                this.initialized = true;\n                console.log('✅ تم تهيئة نظام الأيقونات بنجاح!');\n                \n                // إضافة مؤشر النجاح\n                this.showSuccessIndicator();\n                \n            } catch (error) {\n                console.error('❌ خطأ في تهيئة نظام الأيقونات:', error);\n                this.handleInitError(error);\n            }\n        }\n        \n        // انتظار تحميل DOM\n        waitForDOM() {\n            return new Promise((resolve) => {\n                if (document.readyState === 'loading') {\n                    document.addEventListener('DOMContentLoaded', resolve);\n                } else {\n                    resolve();\n                }\n            });\n        }\n        \n        // إنشاء هيكل الأيقونات\n        async createIconsStructure() {\n            console.log('🏗️ إنشاء هيكل الأيقونات...');\n            \n            // البحث عن قسم الأيقونات أو إنشاؤه\n            let iconsSection = document.querySelector('.nav-icons-section');\n            \n            if (!iconsSection) {\n                iconsSection = this.createIconsSection();\n            }\n            \n            // إنشاء الأيقونات\n            this.createIcons(iconsSection);\n            \n            // تطبيق الأنماط\n            this.applyStyles();\n            \n            console.log('✅ تم إنشاء هيكل الأيقونات');\n        }\n        \n        // إنشاء قسم الأيقونات\n        createIconsSection() {\n            const headerContainer = document.querySelector('.header-container');\n            if (!headerContainer) {\n                throw new Error('لم يتم العثور على حاوي الهيدر');\n            }\n            \n            const iconsSection = document.createElement('div');\n            iconsSection.className = 'nav-icons-section';\n            \n            // إدراج القسم في المكان المناسب\n            const authSection = headerContainer.querySelector('.auth-section') || \n                              headerContainer.querySelector('.flex.items-center.space-x-4');\n            \n            if (authSection) {\n                headerContainer.insertBefore(iconsSection, authSection);\n            } else {\n                headerContainer.appendChild(iconsSection);\n            }\n            \n            return iconsSection;\n        }\n        \n        // إنشاء الأيقونات\n        createIcons(container) {\n            ICONS_DATA.forEach((iconData, index) => {\n                const iconElement = this.createSingleIcon(iconData, index);\n                container.appendChild(iconElement);\n                this.icons.push({\n                    element: iconElement,\n                    data: iconData\n                });\n            });\n        }\n        \n        // إنشاء أيقونة واحدة\n        createSingleIcon(iconData, index) {\n            const iconContainer = document.createElement('div');\n            iconContainer.className = 'pro-nav-icon';\n            iconContainer.setAttribute('data-icon', iconData.name.toLowerCase().replace(' ', '-'));\n            iconContainer.setAttribute('title', iconData.tooltip);\n            iconContainer.setAttribute('role', 'button');\n            iconContainer.setAttribute('tabindex', '0');\n            iconContainer.setAttribute('aria-label', iconData.tooltip);\n            \n            // تحديد أيقونة Font Awesome\n            const iconClass = this.getIconClass(iconData.name);\n            \n            iconContainer.innerHTML = `\n                <div class=\"icon-wrapper ${iconData.selector.replace('.', '')}\">\n                    <i class=\"${iconClass}\"></i>\n                    <div class=\"icon-pulse\"></div>\n                </div>\n            `;\n            \n            return iconContainer;\n        }\n        \n        // الحصول على فئة الأيقونة\n        getIconClass(iconName) {\n            const iconMap = {\n                'Profile': 'fas fa-user-circle',\n                'Live Transactions': 'fas fa-chart-line',\n                'Support': 'fas fa-headset',\n                'Notifications': 'fas fa-bell'\n            };\n            \n            return iconMap[iconName] || 'fas fa-circle';\n        }\n        \n        // إضافة شارات الإشعارات\n        async addNotificationBadges() {\n            console.log('🏷️ إضافة شارات الإشعارات...');\n            \n            this.icons.forEach(icon => {\n                if (icon.data.badge) {\n                    const badge = document.createElement('div');\n                    badge.className = `notification-badge ${icon.data.badgeClass}`;\n                    badge.textContent = icon.data.badge;\n                    badge.setAttribute('aria-label', `${icon.data.badge} إشعارات جديدة`);\n                    \n                    icon.element.appendChild(badge);\n                }\n            });\n            \n            console.log('✅ تم إضافة شارات الإشعارات');\n        }\n        \n        // إعداد مستمعي الأحداث\n        async setupEventListeners() {\n            console.log('🎧 إعداد مستمعي الأحداث...');\n            \n            this.icons.forEach(icon => {\n                // النقر\n                const clickHandler = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.handleIconClick(icon.data);\n                };\n                \n                icon.element.addEventListener('click', clickHandler);\n                this.eventListeners.push({ element: icon.element, event: 'click', handler: clickHandler });\n                \n                // لوحة المفاتيح\n                const keyHandler = (e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        this.handleIconClick(icon.data);\n                    }\n                };\n                \n                icon.element.addEventListener('keydown', keyHandler);\n                this.eventListeners.push({ element: icon.element, event: 'keydown', handler: keyHandler });\n                \n                // التمرير\n                if (SYSTEM_CONFIG.hoverEffects) {\n                    const mouseEnterHandler = () => this.handleIconHover(icon.element, true);\n                    const mouseLeaveHandler = () => this.handleIconHover(icon.element, false);\n                    \n                    icon.element.addEventListener('mouseenter', mouseEnterHandler);\n                    icon.element.addEventListener('mouseleave', mouseLeaveHandler);\n                    \n                    this.eventListeners.push({ element: icon.element, event: 'mouseenter', handler: mouseEnterHandler });\n                    this.eventListeners.push({ element: icon.element, event: 'mouseleave', handler: mouseLeaveHandler });\n                }\n            });\n            \n            console.log('✅ تم إعداد مستمعي الأحداث');\n        }\n        \n        // معالجة النقر على الأيقونة\n        handleIconClick(iconData) {\n            console.log(`🖱️ تم النقر على أيقونة: ${iconData.name}`);\n            \n            // تأثير النقر\n            this.showClickEffect(iconData);\n            \n            // تنفيذ الإجراء\n            switch (iconData.action) {\n                case 'handleProfileAccess':\n                    this.handleProfileAccess();\n                    break;\n                case 'handleLiveTransactions':\n                    this.handleLiveTransactions();\n                    break;\n                case 'handleSupport':\n                    this.handleSupport();\n                    break;\n                case 'handleNotifications':\n                    this.handleNotifications();\n                    break;\n                default:\n                    console.warn(`إجراء غير معروف: ${iconData.action}`);\n            }\n        }\n        \n        // معالجة الوصول للملف الشخصي\n        handleProfileAccess() {\n            const userData = JSON.parse(localStorage.getItem('user') || '{}');\n            \n            if (userData.email || userData.isLoggedIn) {\n                console.log('👤 الانتقال إلى الملف الشخصي...');\n                this.navigateToPage(PAGE_ROUTES.profile);\n            } else {\n                console.log('📝 الانتقال إلى صفحة التسجيل...');\n                this.navigateToPage(PAGE_ROUTES.register);\n            }\n        }\n        \n        // معالجة المعاملات المباشرة\n        handleLiveTransactions() {\n            console.log('📊 الانتقال إلى المعاملات المباشرة...');\n            this.navigateToPage(PAGE_ROUTES.live);\n        }\n        \n        // معالجة الدعم الفني\n        handleSupport() {\n            console.log('🎧 الانتقال إلى الدعم الفني...');\n            this.navigateToPage(PAGE_ROUTES.support);\n        }\n        \n        // معالجة الإشعارات\n        handleNotifications() {\n            console.log('🔔 الانتقال إلى الإشعارات...');\n            \n            // فتح صفحة الأخبار إذا كانت متاحة، وإلا الإشعارات\n            if (typeof advancedNotifications !== 'undefined' && advancedNotifications.openNewsPage) {\n                advancedNotifications.openNewsPage();\n            } else {\n                this.navigateToPage(PAGE_ROUTES.notifications);\n            }\n        }\n        \n        // التنقل إلى صفحة\n        navigateToPage(url) {\n            try {\n                // تأثير الانتقال\n                this.showTransitionEffect();\n                \n                // الانتقال بعد تأخير قصير للتأثير\n                setTimeout(() => {\n                    window.location.href = url;\n                }, SYSTEM_CONFIG.animationDuration);\n                \n            } catch (error) {\n                console.error('❌ خطأ في التنقل:', error);\n                // الانتقال المباشر في حالة الخطأ\n                window.location.href = url;\n            }\n        }\n        \n        // معالجة التمرير\n        handleIconHover(element, isEntering) {\n            if (isEntering) {\n                element.classList.add('hovered');\n                this.showTooltip(element);\n            } else {\n                element.classList.remove('hovered');\n                this.hideTooltip(element);\n            }\n        }\n        \n        // إظهار تلميح الأداة\n        showTooltip(element) {\n            const tooltip = element.getAttribute('title');\n            if (!tooltip) return;\n            \n            // إنشاء تلميح مخصص\n            const tooltipElement = document.createElement('div');\n            tooltipElement.className = 'custom-tooltip';\n            tooltipElement.textContent = tooltip;\n            tooltipElement.style.cssText = `\n                position: absolute;\n                bottom: -40px;\n                left: 50%;\n                transform: translateX(-50%);\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                padding: 8px 12px;\n                border-radius: 8px;\n                font-size: 12px;\n                font-weight: 600;\n                white-space: nowrap;\n                z-index: 10000;\n                pointer-events: none;\n                opacity: 0;\n                transition: opacity 0.3s ease;\n            `;\n            \n            element.appendChild(tooltipElement);\n            \n            // إظهار التلميح\n            setTimeout(() => {\n                tooltipElement.style.opacity = '1';\n            }, 100);\n        }\n        \n        // إخفاء تلميح الأداة\n        hideTooltip(element) {\n            const tooltip = element.querySelector('.custom-tooltip');\n            if (tooltip) {\n                tooltip.style.opacity = '0';\n                setTimeout(() => {\n                    tooltip.remove();\n                }, 300);\n            }\n        }\n        \n        // تأثير النقر\n        showClickEffect(iconData) {\n            const iconElement = document.querySelector(`[data-icon=\"${iconData.name.toLowerCase().replace(' ', '-')}\"]`);\n            if (!iconElement) return;\n            \n            // إضافة فئة التأثير\n            iconElement.classList.add('clicked');\n            \n            // إزالة التأثير بعد فترة\n            setTimeout(() => {\n                iconElement.classList.remove('clicked');\n            }, SYSTEM_CONFIG.animationDuration);\n            \n            // تأثير الموجة\n            this.createRippleEffect(iconElement);\n        }\n        \n        // إنشاء تأثير الموجة\n        createRippleEffect(element) {\n            const ripple = document.createElement('div');\n            ripple.className = 'ripple-effect';\n            ripple.style.cssText = `\n                position: absolute;\n                border-radius: 50%;\n                background: rgba(255, 255, 255, 0.6);\n                transform: scale(0);\n                animation: ripple 0.6s linear;\n                pointer-events: none;\n                z-index: 1;\n            `;\n            \n            const rect = element.getBoundingClientRect();\n            const size = Math.max(rect.width, rect.height);\n            ripple.style.width = ripple.style.height = size + 'px';\n            ripple.style.left = '50%';\n            ripple.style.top = '50%';\n            ripple.style.marginLeft = -size / 2 + 'px';\n            ripple.style.marginTop = -size / 2 + 'px';\n            \n            element.appendChild(ripple);\n            \n            // إزالة التأثير بعد الانتهاء\n            setTimeout(() => {\n                ripple.remove();\n            }, 600);\n        }\n        \n        // تأثير الانتقال\n        showTransitionEffect() {\n            const overlay = document.createElement('div');\n            overlay.className = 'page-transition-overlay';\n            overlay.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: linear-gradient(45deg, rgba(38, 161, 123, 0.9), rgba(59, 130, 246, 0.9));\n                z-index: 99999;\n                opacity: 0;\n                transition: opacity 0.3s ease;\n                pointer-events: none;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-size: 18px;\n                font-weight: 600;\n            `;\n            \n            overlay.innerHTML = `\n                <div style=\"text-align: center;\">\n                    <div style=\"width: 40px; height: 40px; border: 3px solid rgba(255,255,255,0.3); border-top: 3px solid white; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 16px;\"></div>\n                    <div>جاري التحميل...</div>\n                </div>\n            `;\n            \n            document.body.appendChild(overlay);\n            \n            // إظهار التأثير\n            setTimeout(() => {\n                overlay.style.opacity = '1';\n            }, 10);\n        }\n        \n        // تفعيل تأثيرات التمرير\n        async enableHoverEffects() {\n            if (!SYSTEM_CONFIG.hoverEffects) return;\n            \n            console.log('✨ تفعيل تأثيرات التمرير...');\n            \n            // إضافة أنماط CSS للتأثيرات\n            const style = document.createElement('style');\n            style.textContent = `\n                @keyframes ripple {\n                    to {\n                        transform: scale(4);\n                        opacity: 0;\n                    }\n                }\n                \n                @keyframes spin {\n                    0% { transform: rotate(0deg); }\n                    100% { transform: rotate(360deg); }\n                }\n                \n                .pro-nav-icon.clicked {\n                    transform: scale(0.95) !important;\n                }\n                \n                .pro-nav-icon.hovered {\n                    transform: translateY(-8px) scale(1.1) !important;\n                }\n            `;\n            \n            document.head.appendChild(style);\n            \n            console.log('✅ تم تفعيل تأثيرات التمرير');\n        }\n        \n        // إعداد إمكانية الوصول\n        async setupAccessibility() {\n            console.log('♿ إعداد إمكانية الوصول...');\n            \n            this.icons.forEach(icon => {\n                // إضافة خصائص ARIA\n                icon.element.setAttribute('role', 'button');\n                icon.element.setAttribute('tabindex', '0');\n                icon.element.setAttribute('aria-label', icon.data.tooltip);\n                \n                // إضافة وصف للشارات\n                const badge = icon.element.querySelector('.notification-badge');\n                if (badge) {\n                    badge.setAttribute('aria-label', `${badge.textContent} إشعارات جديدة`);\n                }\n            });\n            \n            console.log('✅ تم إعداد إمكانية الوصول');\n        }\n        \n        // تطبيق الأنماط\n        applyStyles() {\n            // التأكد من تطبيق الأنماط المطلوبة\n            const iconsSection = document.querySelector('.nav-icons-section');\n            if (iconsSection) {\n                iconsSection.style.display = 'flex';\n                iconsSection.style.visibility = 'visible';\n                iconsSection.style.opacity = '1';\n            }\n            \n            // تطبيق أنماط الأيقونات\n            this.icons.forEach(icon => {\n                icon.element.style.display = 'flex';\n                icon.element.style.visibility = 'visible';\n                icon.element.style.opacity = '1';\n                icon.element.style.pointerEvents = 'auto';\n                icon.element.style.cursor = 'pointer';\n            });\n        }\n        \n        // إظهار مؤشر النجاح\n        showSuccessIndicator() {\n            if (!SYSTEM_CONFIG.debug) return;\n            \n            const indicator = document.createElement('div');\n            indicator.style.cssText = `\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                background: linear-gradient(45deg, #22c55e, #16a34a);\n                color: white;\n                padding: 12px 20px;\n                border-radius: 12px;\n                font-size: 14px;\n                font-weight: 600;\n                z-index: 99999;\n                box-shadow: 0 8px 25px rgba(34, 197, 94, 0.3);\n                transform: translateX(100%);\n                transition: transform 0.3s ease;\n            `;\n            \n            indicator.innerHTML = `\n                <div style=\"display: flex; align-items: center; gap: 8px;\">\n                    <div style=\"width: 16px; height: 16px; background: white; border-radius: 50%; display: flex; align-items: center; justify-content: center;\">\n                        <div style=\"width: 8px; height: 8px; background: #22c55e; border-radius: 50%;\"></div>\n                    </div>\n                    <span>نظام الأيقونات جاهز!</span>\n                </div>\n            `;\n            \n            document.body.appendChild(indicator);\n            \n            // إظهار المؤشر\n            setTimeout(() => {\n                indicator.style.transform = 'translateX(0)';\n            }, 100);\n            \n            // إخفاء المؤشر بعد 3 ثوان\n            setTimeout(() => {\n                indicator.style.transform = 'translateX(100%)';\n                setTimeout(() => {\n                    indicator.remove();\n                }, 300);\n            }, 3000);\n        }\n        \n        // معالجة خطأ التهيئة\n        handleInitError(error) {\n            console.error('❌ فشل في تهيئة نظام الأيقونات:', error);\n            \n            if (this.retryCount < SYSTEM_CONFIG.retryAttempts) {\n                this.retryCount++;\n                console.log(`🔄 محاولة إعادة التهيئة (${this.retryCount}/${SYSTEM_CONFIG.retryAttempts})...`);\n                \n                setTimeout(() => {\n                    this.init();\n                }, SYSTEM_CONFIG.retryDelay * this.retryCount);\n            } else {\n                console.error('❌ فشل نهائي في تهيئة نظام الأيقونات');\n                this.showErrorIndicator();\n            }\n        }\n        \n        // إظهار مؤشر الخطأ\n        showErrorIndicator() {\n            const indicator = document.createElement('div');\n            indicator.style.cssText = `\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                background: linear-gradient(45deg, #ef4444, #dc2626);\n                color: white;\n                padding: 12px 20px;\n                border-radius: 12px;\n                font-size: 14px;\n                font-weight: 600;\n                z-index: 99999;\n                box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);\n            `;\n            \n            indicator.innerHTML = `\n                <div style=\"display: flex; align-items: center; gap: 8px;\">\n                    <span>⚠️</span>\n                    <span>خطأ في نظام الأيقونات</span>\n                </div>\n            `;\n            \n            document.body.appendChild(indicator);\n            \n            // إزالة المؤشر بعد 5 ثوان\n            setTimeout(() => {\n                indicator.remove();\n            }, 5000);\n        }\n        \n        // تنظيف الموارد\n        destroy() {\n            console.log('🧹 تنظيف موارد نظام الأيقونات...');\n            \n            // إزالة مستمعي الأحداث\n            this.eventListeners.forEach(({ element, event, handler }) => {\n                element.removeEventListener(event, handler);\n            });\n            \n            // تنظيف المتغيرات\n            this.icons = [];\n            this.eventListeners = [];\n            this.initialized = false;\n            \n            console.log('✅ تم تنظيف موارد نظام الأيقونات');\n        }\n    }\n    \n    // إنشاء مثيل النظام\n    let headerIconsManager;\n    \n    // تهيئة النظام عند تحميل الصفحة\n    function initializeSystem() {\n        try {\n            headerIconsManager = new HeaderIconsManager();\n            \n            // إضافة النظام للنافذة العامة للوصول إليه\n            window.headerIconsManager = headerIconsManager;\n            \n        } catch (error) {\n            console.error('❌ خطأ في إنشاء نظام الأيقونات:', error);\n        }\n    }\n    \n    // تشغيل النظام\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializeSystem);\n    } else {\n        initializeSystem();\n    }\n    \n    // إضافة وظائف عامة للتوافق مع الأنظمة الأخرى\n    window.handleProfileAccess = function() {\n        if (headerIconsManager && headerIconsManager.initialized) {\n            headerIconsManager.handleProfileAccess();\n        } else {\n            // نسخة احتياطية\n            const userData = JSON.parse(localStorage.getItem('user') || '{}');\n            if (userData.email || userData.isLoggedIn) {\n                window.location.href = 'pages/profile.html';\n            } else {\n                window.location.href = 'pages/register.html';\n            }\n        }\n    };\n    \n    window.handleQuantumPanelAccess = function() {\n        const userData = JSON.parse(localStorage.getItem('user') || '{}');\n        if (userData.email) {\n            window.location.href = 'pages/profile.html#referral';\n        } else {\n            if (confirm('You must register first to access the advanced referral system. Do you want to register now?')) {\n                window.location.href = 'pages/register.html';\n            }\n        }\n    };\n    \n    // تنظيف الموارد عند إغلاق الصفحة\n    window.addEventListener('beforeunload', () => {\n        if (headerIconsManager) {\n            headerIconsManager.destroy();\n        }\n    });\n    \n    console.log('🚀 تم تحميل نظام الأيقونات المتطور بنجاح!');\n    \n})();\n